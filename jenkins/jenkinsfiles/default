changes = false 

stage('Get Scripts'){
    node {
        sh 'echo "Getting Terraform Scripts"'

        // // Checkout the Terraform API Calls
        git url: 'https://github.com/Westpac/tfscripts'

        // Mark the code build 'plan'....
        stage name: 'Plan', concurrency: 1

        //Remove the terraform state file so we always start from a clean state
        if (fileExists(".terraform/terraform.tfstate")) {
            sh "rm -rf .terraform/terraform.tfstate"
        }
        if (fileExists("status")) {
            sh "rm status"
        }


        // Creating Plan
        sh 'pip3 install -r terraform/requirements.txt'
        sh "set +e; python3 terraform/run_plan.py \'${params.organisation}\' \'${params.app_id}\' \'${params.workspace_name}\' \'${params.destroy_infrastructure}\' \'${params.atlas_token}\'"

        def props = readJSON file: 'data.json'

        if (props['status'] == "unchanged") { // Set plan as Success. Will Stop Job
            sh 'echo "Plan Success"'
            currentBuild.result = 'SUCCESS'
        }
        else if (props['status'] == "failed") { // Fail Job
            currentBuild.result = 'FAILURE'
        }
        else { // Else Changes have been made
            changes = true
        }

        stash name: "data", includes: "data.json"

    }
}

// Return as Success if no changes
if (!changes) {
    return
}

stage('Open Ticket'){

    // RAISE CHANGE REQUEST TO SERVICENOW HERE

    // Request Approval from ServiceNow
    input message:'Approve deployment?'
}

stage('Apply'){
    node {
        unstash name: "data"
        def props = readJSON file: 'data.json'

        // Run Apply
        sh 'pip3 install -r terraform/requirements.txt'
        sh "set +e; python3 terraform/run_apply.py \'${params.organisation}\' \'${params.app_id}\' \'${params.workspace_name}\' \'${props['run_id']}\' \'${params.destroy_infrastructure}\' \'${params.atlas_token}\'"

        // Read again after success
        props = readJSON file: 'data.json'

        if (props['status'] == "applied") {
            currentBuild.result = 'SUCCESS'
            sh 'echo "Successfully Applied!"'
        } else {
            currentBuild.result = 'FAILURE'
            sh 'echo "Apply Failed!"'
        }
    } 
}

